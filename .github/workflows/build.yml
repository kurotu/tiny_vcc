name: Build

# Controls when the workflow will run
on:
  push:
# pull_request:

  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.0'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
      - run: flutter config --enable-windows-desktop
      - run: flutter pub get
      - run: flutter pub run slang
      - run: flutter build windows
      - uses: actions/upload-artifact@v3
        with:
          name: windows
          path: build/windows/runner/Release

  build-msi:
    needs: [build-windows]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: windows
          path: build/windows/runner/Release

      - run: ls -n -r .\\build\\windows\\runner\\Release > built-files.txt
      - run: diff (type .\\installer\\TinyVccInstaller\\TinyVccInstaller\\files.txt) (type built-files.txt)

      - uses: ilammy/msvc-dev-cmd@v1
      - run: devenv .\\installer\\TinyVccInstaller\\TinyVccInstaller.sln /build Release
      - uses: actions/upload-artifact@v3
        with:
          name: msi
          path: installer/TinyVccInstaller/TinyVccInstaller/Release

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.0'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
      - run: flutter config --enable-macos-desktop
      - run: flutter pub get
      - run: flutter pub run slang
      - run: flutter test
      - run: flutter build macos
      - run: brew install create-dmg
      - run: ./scripts/create-dmg.sh "build/macos/Build/Products/Release/Tiny VCC.app" TinyVCC.dmg
      - uses: actions/upload-artifact@v3
        with:
          name: macos
          path: TinyVCC.dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.0'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
      - run: flutter config --enable-linux-desktop
      - run: flutter pub get
      - run: flutter pub run slang
      - run: flutter build linux
      - uses: actions/upload-artifact@v3
        with:
          name: linux
          path: build/linux/x64/release/bundle

  test-unity-hub:
    runs-on: macos-latest
    steps:
      - run: uname -a
      - run: curl -L https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.dmg -o UnityHubSetup.dmg
      - run: hdiutil mount UnityHubSetup.dmg
      - run: ls /Volumes
      - run: cp -r /Volumes/Unity\ Hub\ */Unity\ Hub.app /Applications/
      - run: hdiutil unmount /Volumes/Unity\ Hub\ *
      - run: /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless install --version 2019.4.31f1 -c bd5abf232a62
      - run: /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless editors --installed

  test-unity-hub-m1:
    runs-on: macos-latest-xlarge
    steps:
      - run: uname -a
      - run: curl -L https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.dmg -o UnityHubSetup.dmg
      - run: hdiutil mount UnityHubSetup.dmg
      - run: ls /Volumes
      - run: cp -r /Volumes/Unity\ Hub\ */Unity\ Hub.app /Applications/
      - run: hdiutil unmount /Volumes/Unity\ Hub\ *
      - run: /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless install --version 2019.4.31f1 -c bd5abf232a62 --architecture arm64
      - run: /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless editors --installed

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-msi, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: msi
          path: build/windows/runner/Release

      - uses: actions/download-artifact@v3
        with:
          name: macos

      - uses: actions/download-artifact@v3
        with:
          name: linux
          path: build/linux/x64/release/bundle

      - run: ls

      - name: Create windows release
        run: |
          NAME=tiny_vcc-${GITHUB_REF#refs/tags/}
          mv build/windows/runner/Release ${NAME}
          cp LICENSE* ${NAME}/
          cp README*.md ${NAME}/
          zip -r ${NAME}.zip ${NAME}

      - name: Create macos release
        run: mv TinyVCC.dmg TinyVCC-${GITHUB_REF#refs/tags/}.dmg

      - name: Create release note
        run: ./scripts/generate-releasenote.sh ${GITHUB_REF#refs/tags/v} | tee ${{ github.workspace }}-release.txt

      - uses: softprops/action-gh-release@v1
        with:
          draft: true
          body_path: ${{ github.workspace }}-release.txt
          files: |
            *.zip
            *.dmg
